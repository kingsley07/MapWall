{
  "ver": "1.0.25",
  "uuid": "165d1234-60f9-4cc6-b2e1-ff0129fcd45f",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 wall0;\nuniform vec4 wall1;\nuniform vec4 wall2;\nuniform vec4 wall3;\nuniform float wallCount;\nfloat getAngle (vec2 v) {\n  float len = length(v);\n  if(v.x >= 0.0 && v.y >= 0.0){\n    return degrees(asin(v.y / len));\n  }\n  else if(v.x < 0.0 && v.y >= 0.0){\n    return degrees(asin(-v.x / len)) + 90.0;\n  }\n  else if(v.x < 0.0 && v.y < 0.0){\n    return degrees(asin(-v.y / len)) + 180.0;\n  }\n  else{\n    return degrees(asin(v.x / len)) + 270.0;\n  }\n}\nbool checkWall(vec4 wall){\n  if(v_uv0.x >= wall.x && v_uv0.x <= wall.z && v_uv0.y >= wall.y && v_uv0.y <= wall.w){\n    return true;\n  }\n  if(wall.w <= 0.5){\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z || v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x || v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n    else{\n      if(v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n  }\n  else if(wall.y >= 0.5){\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z || v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x || v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n    else{\n      if(v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n  }\n  else{\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) || angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 cover = vec4(0, 0, 0, 0.5);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    vec2 center = vec2(0.5, 0.5);\n    bool isMask = false;\n    vec2 v = v_uv0 - center;\n    float len = length(v);\n    if(len > 0.5){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 0.0 && checkWall(wall0)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 1.0 && checkWall(wall1)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 2.0 && checkWall(wall2)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 3.0 && checkWall(wall3)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask){\n      if(len > 0.4){\n        float PI = 3.14159;\n        float a = (0.5 - len) / 0.1;\n        a = 0.5 * ( 1.0 - cos(PI * a));\n        o.a  = o.a * a;\n        cover.a = cover.a * (1.0 - a);\n        float aa = o.a + cover.a - o.a * cover.a;\n        o.rgb = o.rgb * (o.a * (1.0 - cover.a) / aa);\n        o.a = aa;\n      }\n    }\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform MapInfo{\n  vec4 wall0;\n  vec4 wall1;\n  vec4 wall2;\n  vec4 wall3;\n  vec4 wall4;\n  vec4 wall5;\n  vec4 wall6;\n  vec4 wall7;\n  float wallCount;\n};\nfloat getAngle (vec2 v) {\n  float len = length(v);\n  if(v.x >= 0.0 && v.y >= 0.0){\n    return degrees(asin(v.y / len));\n  }\n  else if(v.x < 0.0 && v.y >= 0.0){\n    return degrees(asin(-v.x / len)) + 90.0;\n  }\n  else if(v.x < 0.0 && v.y < 0.0){\n    return degrees(asin(-v.y / len)) + 180.0;\n  }\n  else{\n    return degrees(asin(v.x / len)) + 270.0;\n  }\n}\nbool checkWall(vec4 wall){\n  if(v_uv0.x >= wall.x && v_uv0.x <= wall.z && v_uv0.y >= wall.y && v_uv0.y <= wall.w){\n    return true;\n  }\n  if(wall.w <= 0.5){\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z || v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x || v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n    else{\n      if(v_uv0.y > wall.w){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n  }\n  else if(wall.y >= 0.5){\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z || v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x || v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5))){\n        return true;\n      }\n    }\n    else{\n      if(v_uv0.y < wall.y){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n  }\n  else{\n    if(wall.z <= 0.5){\n      if(v_uv0.x > wall.z){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n    else if(wall.x >= 0.5){\n      if(v_uv0.x < wall.x){\n        return false;\n      }\n      float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));\n      if(angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) || angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){\n        return true;\n      }\n    }\n  }\n  return false;\n}\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 cover = vec4(0, 0, 0, 0.5);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    vec2 center = vec2(0.5, 0.5);\n    bool isMask = false;\n    vec2 v = v_uv0 - center;\n    float len = length(v);\n    if(len > 0.5){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 0.0 && checkWall(wall0)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 1.0 && checkWall(wall1)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 2.0 && checkWall(wall2)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask && wallCount > 3.0 && checkWall(wall3)){\n      isMask = true;\n      o = cover;\n    }\n    if(!isMask){\n      if(len > 0.4){\n        float PI = 3.14159;\n        float a = (0.5 - len) / 0.1;\n        a = 0.5 * ( 1.0 - cos(PI * a));\n        o.a  = o.a * a;\n        cover.a = cover.a * (1.0 - a);\n        float aa = o.a + cover.a - o.a * cover.a;\n        o.rgb = o.rgb * (o.a * (1.0 - cover.a) / aa);\n        o.a = aa;\n      }\n    }\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}