// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # 墙0
        wall0: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙0"
          } 
        } 
        # 墙1
        wall1: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙1"
          } 
        } 
        # 墙2
        wall2: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙2"
          } 
        } 
        # 墙3
        wall3: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙3"
          } 
        } 
        # 墙4
        wall4: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙4"
          } 
        } 
        # 墙5
        wall5: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙5"
          } 
        } 
        # 墙6
        wall6: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙6"
          } 
        } 
        # 墙7
        wall7: { 
          value: [1.0, 1.0, 0.0, 1.0],
          editor: { 
            type: color,
            tooltip: "墙7"
          } 
        } 
        # 墙数量
        wallCount: {
          value: 0.0,
          editor: {
            tooltip: "墙数量" 
          }
        }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform MapInfo{
    vec4 wall0;
    vec4 wall1;
    vec4 wall2;
    vec4 wall3;
    vec4 wall4;
    vec4 wall5;
    vec4 wall6;
    vec4 wall7;
    float wallCount;
  };

  float getAngle (vec2 v) {
    float len = length(v);
    if(v.x >= 0.0 && v.y >= 0.0){
      return degrees(asin(v.y / len));
    }
    else if(v.x < 0.0 && v.y >= 0.0){
      return degrees(asin(-v.x / len)) + 90.0;
    }
    else if(v.x < 0.0 && v.y < 0.0){
      return degrees(asin(-v.y / len)) + 180.0;
    }
    else{
      return degrees(asin(v.x / len)) + 270.0;
    }
  }
  
  bool checkArea(vec2 v, float minAngle, float maxAngle){
    if(v.x == 0.0 && v.y == 0.0){
      return false;
    }
    float angle = getAngle(v);
    return angle >= area.x && angle <= area.y;
  }

  bool checkWall(vec4 wall){
    if(v_uv0.x >= wall.x && v_uv0.x <= wall.z && v_uv0.y >= wall.y && v_uv0.y <= wall.w){
      return true;
    }
    if(wall.w <= 0.5){
      if(wall.z <= 0.5){
        if(v_uv0.x > wall.z || v_uv0.y > wall.w){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){
          return true;
        }
      }
      else if(wall.x >= 0.5){
        if(v_uv0.x < wall.x || v_uv0.y > wall.w){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){
          return true;
        }
      }
      else{
        if(v_uv0.y > wall.w){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.w - 0.5))){
          return true;
        }
      }
    }
    else if(wall.y >= 0.5){
      if(wall.z <= 0.5){
        if(v_uv0.x > wall.z || v_uv0.y < wall.y){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){
          return true;
        }
      }
      else if(wall.x >= 0.5){
        if(v_uv0.x < wall.x || v_uv0.y < wall.y){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5))){
          return true;
        }
      }
      else{
        if(v_uv0.y < wall.y){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.z - 0.5, wall.y - 0.5)) && angle <= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){
          return true;
        }
      }
    }
    else{
      if(wall.z <= 0.5){
        if(v_uv0.x > wall.z){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle >= getAngle(vec2(wall.z - 0.5, wall.w - 0.5)) && angle <= getAngle(vec2(wall.z - 0.5, wall.y - 0.5))){
          return true;
        }
      }
      else if(wall.x >= 0.5){
        if(v_uv0.x < wall.x){
          return false;
        }
        float angle = getAngle(vec2(v_uv0.x - 0.5, v_uv0.y - 0.5));
        if(angle <= getAngle(vec2(wall.x - 0.5, wall.w - 0.5)) || angle >= getAngle(vec2(wall.x - 0.5, wall.y - 0.5))){
          return true;
        }
      }
    }
    return false;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 cover = vec4(0, 0, 0, 0.5);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
      vec2 center = vec2(0.5, 0.5);
      bool isMask = false;
      vec2 v = v_uv0 - center;
      float len = length(v);
      if(len > 0.5){
        isMask = true;
        o = cover;
      }

      if(!isMask && wallCount > 0.0 && checkWall(wall0)){
        isMask = true;
        o = cover;
      }
      if(!isMask && wallCount > 1.0 && checkWall(wall1)){
        isMask = true;
        o = cover;
      }
      if(!isMask && wallCount > 2.0 && checkWall(wall2)){
        isMask = true;
        o = cover;
      }
      if(!isMask && wallCount > 3.0 && checkWall(wall3)){
        isMask = true;
        o = cover;
      }



      if(!isMask){
        if(len > 0.4){
          float PI = 3.14159;
          float a = (0.5 - len) / 0.1;
          a = 0.5 * ( 1.0 - cos(PI * a));
          o.a  = o.a * a;
          cover.a = cover.a * (1.0 - a);
          float aa = o.a + cover.a - o.a * cover.a;
          o.rgb = o.rgb * (o.a * (1.0 - cover.a) / aa);
          o.a = aa;
        }
      }
    #endif


    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
